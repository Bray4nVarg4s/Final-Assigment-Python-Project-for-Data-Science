# -*- coding: utf-8 -*-
"""Final Assigment-Phyton Project for Data Science

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PuReEOM7X5StMkAzVjjpRUV7gAsio4EO

# Final Assigment
# Phyton Project For Data Science

First, the necessary libraries are installed and imported.
"""

!pip install yfinance==0.1.70 --quiet
!pip install spacy --quiet
!python -m spacy download en_core_web_sm --quiet
!pip install nbformat --quiet
!pip install --upgrade nbformat --quiet

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

"""The warnings can be ignoredu sing the warnings module"""

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

"""additionally, a function for plotting the series is proposed."""

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021--06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

"""## __QUESTIONS__

### __1. Extracting Tesla Stock Data Using yfinance__
"""

# Use the Ticker function to create a ticker object
tesla=yf.Ticker("TSLA")
# Use the ticker object an the function History to extract stock information and save it in a dataframe
tesla_data=tesla.history(period="max")
# Reset the index
tesla_data.reset_index(inplace=True)
# Display the datraframe
tesla_data

"""### __2. Extracting Tesla Revenue Data Using Webscraping__"""

# Use  the request library to dowload the respective webpage
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data=requests.get(url).text
# Parse html variable with beautiful_soup
soup=BeautifulSoup(html_data,'html.parser')
# Use the beautiful soup of the html variable function to extract the table an store it into a dataframe
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])
for row in soup.find("tbody").find_all("tr"):
    col=soup.find_all("td")
    date = col[0].text
    revenue= col[1].text
    new_data=pd.DataFrame([{"Date":date,"Revenue":revenue}])
    tesla_revenue=pd.concat([tesla_revenue,new_data],ignore_index=True)
# Remove the comma and dolar sign form revenue column
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"", regex=True)
# Remove null or empty strings in Revenue column
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
# Display the last 5 rows of the dataframe
tesla_revenue.tail()

"""### __3. Extracting GameStop Stock Data Using yfinance__"""

# Use the Ticker function to create a ticker object
gamestop=yf.Ticker("GME")
# Using the ticker object an the function History to extract stock information and save it in a dataframe
gme_data=gamestop.history(period="max")
# Reset the index
gme_data.reset_index(inplace=True)
# Display the datraframe
gme_data

"""### __4. Extracting GameStop Revenue Data Using Webscraping__"""

# Use  the request library to dowload the respective webpage
url="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data=requests.get(url).text
# Parse html variable with beautiful_soup
soup=BeautifulSoup(html_data,'html.parser')
# Use the beautiful soup of the html variable function to extract the table an store it into a dataframe
gme_revenue=pd.DataFrame(columns=["Date","Revenue"])
for row in soup.find("tbody").find_all("tr"):
    col=soup.find_all("td")
    date = col[0].text
    revenue= col[1].text
    new_data=pd.DataFrame([{"Date":date,"Revenue":revenue}])
    gme_revenue=pd.concat([gme_revenue,new_data],ignore_index=True)
# Remove the comma and dolar sign form revenue column
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"", regex=True)
# Remove null or empty strings in Revenue column
tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]
# Display the last 5 rows of the dataframe
gme_revenue.tail()

"""### __5. Tesla Stock and Revenue Dashboard__"""

make_graph(tesla_data,tesla_revenue,"Tesla")

"""### __6. GameStop Stock and Revenue Dashboard__"""

make_graph(gme_data, gme_revenue, 'GameStop')